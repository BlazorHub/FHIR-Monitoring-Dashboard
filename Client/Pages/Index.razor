@page "/"
@using FIT3077.Client.Services
@inject AppStateService State
@implements IDisposable

<style>
    .card_header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        height: 50px;
        background-color: #394263;
        color: #FFF;
    }
</style>
<div class="top-row" style="justify-content: space-between;position: relative">
    <ThresholdSubmission OnClickHighBloodPressure="State.ProcessHighBloodInput"></ThresholdSubmission>
    <Submission OnSearch="State.Search" IsSearching="State.SearchInProgress"></Submission>
</div>

<div>
    <div class="container-fluid py-4">
        <div class="row">
            <div class="col-3">
                <div class="bg-light" style="height: 350px;">
                    <div class="card_header">
                        <div class="pl-3"><strong>Patient List</strong></div>
                    </div>
                    <div class="bg-light" style="overflow-y: auto; height:300px">
                        <PatientList Patients="State.Patients" OnAdd="State.AddToMonitors" IsLoading="State.SearchInProgress"></PatientList>
                    </div>

                </div>
            </div>
            <div class="col-9 ">
                <div class="bg-light" style=" height: 350px;">
                    <div class="card_header">
                        <div class="pl-3">
                            <strong>Monitor List</strong>
                        </div>
                        <IntervalTimeSetting OnSetTime="State.SetTime"></IntervalTimeSetting>
                    </div>
                    <div class="bg-light" style="overflow-y: auto; height:300px">
                        <MonitorList Monitors="State.Monitors" OnRemove="State.RemoveFromMonitors" OnMonitorRecord="State.ModifyRecordState">
                        </MonitorList>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid">
        <div class="row">
            <div class="col-6">
                <div class="bg-light" style="height: 350px;">
                    <div class="card_header">
                        <div class="pl-3"><strong>High Systolic Chart</strong></div>
                    </div>
                    <div class="bg-light d-flex flex" style="overflow-x: auto; max-height:300px ; max-width: 573.67px">
                        <HighBloodPressure Monitors="State.Monitors"></HighBloodPressure>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <div class="container-fluid">
        <div class="row">
            <div class="col-6">
                <div class="bg-light" style="height: 350px;">
                    <div class="card_header">
                        <div class="pl-3"><strong>Cholesterol Chart</strong></div>
                    </div>
                    <div class="bg-light d-flex flex" style="overflow-x: auto; max-height:300px ; max-width: 573.67px">
                        <TotalCholesterolChart Monitors="State.Monitors"></TotalCholesterolChart>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid">
        <div class="row">
            <div class="col-6">
                <div style="height: 350px;">
                    <div class="card_header">
                        <div class="pl-3"><strong>High Systolic Blood Pressure Patients</strong></div>
                    </div>
                    <div><HighSystolicObservations Monitors="State.Monitors"></HighSystolicObservations></div>
                </div>
            </div>
        </div>
    </div>
</div>

@code{


    protected override void OnInitialized()
    {
        //Create timer for interval update
        State.t = new System.Timers.Timer();
        State.t.Elapsed += async (s, e) =>
        {
            await State.Update();
        };
        State.t.Interval = 1000 * 60 * 5;
        State.t.Start();
        //Subscribe to the services
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

}